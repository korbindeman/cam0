import numpy as np
from .controls import Controls as Controls
from .sensor_format import SensorFormat as SensorFormat
from .utils import convert_from_libcamera_type as convert_from_libcamera_type
from PIL import Image
from _typeshed import Incomplete
from pathlib import Path
from picamera2.picamera2 import Picamera2 as Picamera2
from typing import Any

class _MappedBuffer:
    def __init__(self, request: CompletedRequest, stream: str, write: bool = True) -> None: ...
    def __enter__(self) -> Any: ...
    def __exit__(self, exc_type: Any, exc_value: Any, exc_traceback: Any) -> None: ...

class MappedArray:
    def __init__(self, request: CompletedRequest, stream: str, reshape: bool = True, write: bool = True) -> None: ...
    def __enter__(self) -> MappedArray: ...
    def __exit__(self, exc_type: Any, exc_value: Any, exc_traceback: Any) -> None: ...
    @property
    def array(self) -> np.ndarray | None: ...

class CompletedRequest:
    FASTER_JPEG: bool
    request: Incomplete
    ref_count: int
    lock: Incomplete
    picam2: Incomplete
    stop_count: int
    configure_count: int
    config: Incomplete
    stream_map: Incomplete
    syncs: Incomplete
    def __init__(self, request: Any, picam2: Picamera2) -> None: ...
    def acquire(self) -> None: ...
    def release(self) -> None: ...
    def make_buffer(self, name: str) -> np.ndarray: ...
    def get_metadata(self) -> dict[str, Any]: ...
    def make_array(self, name: str) -> np.ndarray: ...
    def make_image(self, name: str, width: int | None = None, height: int | None = None) -> Image.Image: ...
    def save(self, name: str, file_output: Any, format: str | None = None, exif_data: dict[str, Any] | None = None) -> None: ...
    def save_dng(self, file_output: Any, name: str = 'raw') -> None: ...

class Helpers:
    picam2: Incomplete
    def __init__(self, picam2: Picamera2) -> None: ...
    def make_array(self, buffer, config): ...
    def make_image(self, buffer: np.ndarray, config: dict[str, Any], width: int | None = None, height: int | None = None) -> Image.Image: ...
    def save(self, img: Image.Image, metadata: dict[str, Any], file_output: str | Path, format: str | None = None, exif_data: dict | None = None) -> None: ...
    def save_dng(self, buffer: np.ndarray, metadata: dict[str, Any], config: dict[str, Any], file_output: Any) -> None: ...
    def decompress(self, array: np.ndarray): ...
