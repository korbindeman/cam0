from collections.abc import Callable as Callable
from typing import Any, Generic, Literal, TypeVar

T = TypeVar('T')

class Job(Generic[T]):
    calls: int
    def __init__(self, functions: list[Callable[..., tuple[bool, Any] | tuple[Literal[True], T]]], signal_function=None) -> None: ...
    def execute(self) -> bool: ...
    def signal(self) -> None: ...
    def get_result(self, timeout: float | None = None) -> T: ...
    def cancel(self) -> None: ...
