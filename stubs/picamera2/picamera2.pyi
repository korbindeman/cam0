import contextlib
import libcamera
import numpy as np
import types
from .configuration import CameraConfiguration as CameraConfiguration
from .controls import Controls as Controls
from .job import Job as Job
from .request import CompletedRequest as CompletedRequest, Helpers as Helpers
from .sensor_format import SensorFormat as SensorFormat
from PIL import Image
from _typeshed import Incomplete
from collections.abc import Callable as Callable, Generator
from enum import Enum
from numpy.typing import NDArray as NDArray
from picamera2.allocators import DmaAllocator as DmaAllocator
from picamera2.encoders import Encoder as Encoder, H264Encoder as H264Encoder, MJPEGEncoder as MJPEGEncoder, Quality as Quality
from picamera2.outputs import FfmpegOutput as FfmpegOutput, FileOutput as FileOutput
from picamera2.previews import DrmPreview as DrmPreview, NullPreview as NullPreview, QtGlPreview as QtGlPreview, QtPreview as QtPreview
from typing import Any, Generic, Literal, TypeVar, TypedDict, overload

STILL: Incomplete
RAW: Incomplete
VIDEO: Incomplete
VIEWFINDER: Incomplete
T = TypeVar('T')

class Preview(Enum):
    NULL = NullPreview
    DRM = DrmPreview
    QT = QtPreview
    QTGL = QtGlPreview

class GlobalCameraInfo(TypedDict):
    Model: str
    Location: int
    Rotation: int
    Id: str
    Num: int

class CameraManager:
    running: bool
    cameras: Incomplete
    def __init__(self) -> None: ...
    thread: Incomplete
    def setup(self) -> None: ...
    @property
    def cms(self) -> libcamera.CameraManager: ...
    def reset(self) -> None: ...
    def add(self, index, camera) -> None: ...
    def cleanup(self, index) -> None: ...
    def listen(self) -> None: ...
    def handle_request(self, flushid=None) -> None: ...

class classproperty(property, Generic[T]):
    def __init__(self, fget: Callable[[type], T]) -> None: ...
    def __get__(self, obj, cls=None) -> T: ...

class Picamera2:
    platform: Incomplete
    @classproperty
    def DEBUG(self): ...
    @classproperty
    def INFO(self): ...
    @classproperty
    def WARNING(self): ...
    @classproperty
    def ERROR(self): ...
    @classproperty
    def CRITICAL(self): ...
    @staticmethod
    def set_logging(level=..., output=..., msg=None) -> None: ...
    @staticmethod
    def load_tuning_file(tuning_file, dir=None) -> dict[str, Any]: ...
    @staticmethod
    def find_tuning_algo(tuning, name) -> dict[str, dict]: ...
    @staticmethod
    def global_camera_info() -> list[GlobalCameraInfo]: ...
    notifymeread: Incomplete
    is_open: bool
    camera_idx: Incomplete
    request_lock: Incomplete
    verbose_console: Incomplete
    helpers: Incomplete
    preview_configuration_: Incomplete
    still_configuration_: Incomplete
    video_configuration_: Incomplete
    allocator: Incomplete
    def __init__(self, camera_num: int = 0, verbose_console=None, tuning=None, allocator=None) -> None: ...
    @property
    def camera_manager(self) -> libcamera.CameraManager: ...
    @property
    def preview_configuration(self) -> CameraConfiguration: ...
    @preview_configuration.setter
    def preview_configuration(self, value) -> None: ...
    @property
    def still_configuration(self) -> CameraConfiguration: ...
    @still_configuration.setter
    def still_configuration(self, value) -> None: ...
    @property
    def video_configuration(self) -> CameraConfiguration: ...
    @video_configuration.setter
    def video_configuration(self, value) -> None: ...
    @property
    def request_callback(self): ...
    post_callback: Incomplete
    @request_callback.setter
    def request_callback(self, value) -> None: ...
    @property
    def camera_properties(self) -> dict[str, Any]: ...
    @property
    def camera_controls(self) -> dict[str, tuple[Any, Any, Any]]: ...
    @property
    def title_fields(self) -> list[str]: ...
    @title_fields.setter
    def title_fields(self, fields): ...
    def __enter__(self): ...
    def __exit__(self, exc_type: type[BaseException] | None, exc_val: BaseException | None, exc_traceback: types.TracebackType | None) -> None: ...
    def __del__(self) -> None: ...
    sensor_modes_: Incomplete
    @property
    def sensor_modes(self) -> list[dict[str, Any]]: ...
    def attach_preview(self, preview) -> None: ...
    def start_preview(self, preview=None, **kwargs) -> None: ...
    def detach_preview(self) -> None: ...
    def stop_preview(self) -> None: ...
    streams: Incomplete
    stream_map: Incomplete
    camera: Incomplete
    camera_ctrl_info: Incomplete
    camera_config: Incomplete
    libcamera_config: Incomplete
    def close(self) -> None: ...
    def create_preview_configuration(self, main={}, lores=None, raw={}, transform=..., colour_space=..., buffer_count: int = 4, controls={}, display: str = 'main', encode: str = 'main', queue: bool = True, sensor={}, use_case: str = 'preview') -> dict[str, Any]: ...
    def create_still_configuration(self, main={}, lores=None, raw={}, transform=..., colour_space=..., buffer_count: int = 1, controls={}, display=None, encode=None, queue: bool = True, sensor={}, use_case: str = 'still') -> dict[str, Any]: ...
    def create_video_configuration(self, main={}, lores=None, raw={}, transform=..., colour_space=None, buffer_count: int = 6, controls={}, display: str = 'main', encode: str = 'main', queue: bool = True, sensor={}, use_case: str = 'video') -> dict[str, Any]: ...
    def check_stream_config(self, stream_config, name) -> None: ...
    def check_camera_config(self, camera_config) -> None: ...
    @staticmethod
    def align_stream(stream_config, optimal: bool = True) -> None: ...
    @staticmethod
    def align_configuration(config, optimal: bool = True) -> None: ...
    camera_properties_: Incomplete
    display_stream_name: Incomplete
    encode_stream_name: Incomplete
    controls: Incomplete
    def configure_(self, camera_config) -> None: ...
    def configure(self, camera_config=None) -> None: ...
    def camera_configuration(self) -> dict[str, Any]: ...
    def stream_configuration(self, name: str = 'main') -> dict[str, Any]: ...
    started: bool
    def start_(self) -> None: ...
    def start(self, config=None, show_preview: bool = False) -> None: ...
    def cancel_all_and_flush(self) -> None: ...
    completed_requests: Incomplete
    def stop_(self, request=None): ...
    def stop(self) -> None: ...
    def set_controls(self, controls) -> None: ...
    def process_requests(self, display) -> None: ...
    def wait(self, job: Job[T], timeout=None) -> T: ...
    def dispatch_functions(self, functions, wait, signal_function=None, immediate: bool = False) -> T | Job[T]: ...
    def set_frame_drops_(self, num_frames): ...
    def drop_frames_(self): ...
    def wait_for_timestamp_(self, timestamp_ns): ...
    @overload
    def drop_frames(self, num_frames, wait: None = ..., signal_function: None = ...) -> None: ...
    @overload
    def drop_frames(self, num_frames, wait: None = ..., signal_function: Callable[[Job], None] = ...) -> Job[None]: ...
    @overload
    def drop_frames(self, num_frames, wait: Literal[True] = ..., signal_function: Callable[[Job], None] | None = ...) -> None: ...
    @overload
    def drop_frames(self, num_frames, wait: Literal[False] = ..., signal_function: Callable[[Job], None] | None = ...) -> Job[None]: ...
    def capture_file_(self, file_output, name, format=None, exif_data=None): ...
    @overload
    def capture_file(self, file_output, name: str = 'main', format=None, wait: None = ..., signal_function: None = ..., exif_data=None) -> dict[str, Any]: ...
    @overload
    def capture_file(self, file_output, name: str = 'main', format=None, wait: None = ..., signal_function: Callable[[Job], None] = ..., exif_data=None) -> Job[dict[str, Any]]: ...
    @overload
    def capture_file(self, file_output, name: str = 'main', format=None, wait: Literal[True] = ..., signal_function: Callable[[Job], None] | None = ..., exif_data=None) -> dict[str, Any]: ...
    @overload
    def capture_file(self, file_output, name: str = 'main', format=None, wait: Literal[False] = ..., signal_function: Callable[[Job], None] | None = ..., exif_data=None) -> Job[dict[str, Any]]: ...
    def switch_mode_(self, camera_config): ...
    @overload
    def switch_mode(self, camera_config, wait: None = ..., signal_function: None = ...) -> dict[str, Any]: ...
    @overload
    def switch_mode(self, camera_config, wait: None = ..., signal_function: Callable[[Job], None] = ...) -> Job[dict[str, Any]]: ...
    @overload
    def switch_mode(self, camera_config, wait: Literal[True] = ..., signal_function: Callable[[Job], None] | None = ...) -> dict[str, Any]: ...
    @overload
    def switch_mode(self, camera_config, wait: Literal[False] = ..., signal_function: Callable[[Job], None] | None = ...) -> Job[dict[str, Any]]: ...
    @overload
    def switch_mode_and_drop_frames(self, camera_config, num_frames, wait: None = ..., signal_function: None = ...) -> None: ...
    @overload
    def switch_mode_and_drop_frames(self, camera_config, num_frames, wait: None = ..., signal_function: Callable[[Job], None] = ...) -> Job[None]: ...
    @overload
    def switch_mode_and_drop_frames(self, camera_config, num_frames, wait: Literal[True] = ..., signal_function: Callable[[Job], None] | None = ...) -> None: ...
    @overload
    def switch_mode_and_drop_frames(self, camera_config, num_frames, wait: Literal[False] = ..., signal_function: Callable[[Job], None] | None = ...) -> Job[None]: ...
    @overload
    def switch_mode_and_capture_file(self, camera_config, file_output, name: str = 'main', format=None, wait: None = ..., signal_function: None = ..., exif_data=None, delay: int = 0) -> dict[str, Any]: ...
    @overload
    def switch_mode_and_capture_file(self, camera_config, file_output, name: str = 'main', format=None, wait: None = ..., signal_function: Callable[[Job], None] = ..., exif_data=None, delay: int = 0) -> Job[dict[str, Any]]: ...
    @overload
    def switch_mode_and_capture_file(self, camera_config, file_output, name: str = 'main', format=None, wait: Literal[True] = ..., signal_function: Callable[[Job], None] | None = ..., exif_data=None, delay: int = 0) -> dict[str, Any]: ...
    @overload
    def switch_mode_and_capture_file(self, camera_config, file_output, name: str = 'main', format=None, wait: Literal[False] = ..., signal_function: Callable[[Job], None] | None = ..., exif_data=None, delay: int = 0) -> Job[dict[str, Any]]: ...
    @overload
    def switch_mode_and_capture_request(self, camera_config, wait: None = ..., signal_function: None = ..., delay: int = 0) -> CompletedRequest: ...
    @overload
    def switch_mode_and_capture_request(self, camera_config, wait: None = ..., signal_function: Callable[[Job], None] = ..., delay: int = 0) -> Job[CompletedRequest]: ...
    @overload
    def switch_mode_and_capture_request(self, camera_config, wait: Literal[True] = ..., signal_function: Callable[[Job], None] | None = ..., delay: int = 0) -> CompletedRequest: ...
    @overload
    def switch_mode_and_capture_request(self, camera_config, wait: Literal[False] = ..., signal_function: Callable[[Job], None] | None = ..., delay: int = 0) -> Job[CompletedRequest]: ...
    def capture_request_(self): ...
    @overload
    def capture_request(self, wait: None = ..., signal_function: None = ..., flush=None) -> CompletedRequest: ...
    @overload
    def capture_request(self, wait: None = ..., signal_function: Callable[[Job], None] = ..., flush=None) -> Job[CompletedRequest]: ...
    @overload
    def capture_request(self, wait: Literal[True] = ..., signal_function: Callable[[Job], None] | None = ..., flush=None) -> CompletedRequest: ...
    @overload
    def capture_request(self, wait: Literal[False] = ..., signal_function: Callable[[Job], None] | None = ..., flush=None) -> Job[CompletedRequest]: ...
    @overload
    def switch_mode_capture_request_and_stop(self, camera_config, wait: None = ..., signal_function: None = ...) -> CompletedRequest: ...
    @overload
    def switch_mode_capture_request_and_stop(self, camera_config, wait: None = ..., signal_function: Callable[[Job], None] = ...) -> Job[CompletedRequest]: ...
    @overload
    def switch_mode_capture_request_and_stop(self, camera_config, wait: Literal[True] = ..., signal_function: Callable[[Job], None] | None = ...) -> CompletedRequest: ...
    @overload
    def switch_mode_capture_request_and_stop(self, camera_config, wait: Literal[False] = ..., signal_function: Callable[[Job], None] | None = ...) -> Job[CompletedRequest]: ...
    @overload
    def capture_sync_request(self, wait: None = ..., signal_function: None = ...) -> CompletedRequest: ...
    @overload
    def capture_sync_request(self, wait: None = ..., signal_function: Callable[[Job], None] = ...) -> Job[CompletedRequest]: ...
    @overload
    def capture_sync_request(self, wait: Literal[True] = ..., signal_function: Callable[[Job], None] | None = ...) -> CompletedRequest: ...
    @overload
    def capture_sync_request(self, wait: Literal[False] = ..., signal_function: Callable[[Job], None] | None = ...) -> Job[CompletedRequest]: ...
    @contextlib.contextmanager
    def captured_request(self, wait=None, flush=None) -> Generator[Incomplete]: ...
    @contextlib.contextmanager
    def captured_sync_request(self, wait=None) -> Generator[Incomplete]: ...
    def capture_metadata_(self): ...
    @overload
    def capture_metadata(self, wait: None = ..., signal_function: None = ...) -> dict[str, Any]: ...
    @overload
    def capture_metadata(self, wait: None = ..., signal_function: Callable[[Job], None] = ...) -> Job[dict[str, Any]]: ...
    @overload
    def capture_metadata(self, wait: Literal[True] = ..., signal_function: Callable[[Job], None] | None = ...) -> dict[str, Any]: ...
    @overload
    def capture_metadata(self, wait: Literal[False] = ..., signal_function: Callable[[Job], None] | None = ...) -> Job[dict[str, Any]]: ...
    def capture_buffer_(self, name): ...
    @overload
    def capture_buffer(self, name: str = 'main', wait: None = ..., signal_function: None = ...) -> NDArray[np.uint8]: ...
    @overload
    def capture_buffer(self, name: str = 'main', wait: None = ..., signal_function: Callable[[Job], None] = ...) -> Job[NDArray[np.uint8]]: ...
    @overload
    def capture_buffer(self, name: str = 'main', wait: Literal[True] = ..., signal_function: Callable[[Job], None] | None = ...) -> NDArray[np.uint8]: ...
    @overload
    def capture_buffer(self, name: str = 'main', wait: Literal[False] = ..., signal_function: Callable[[Job], None] | None = ...) -> Job[NDArray[np.uint8]]: ...
    def capture_buffers_and_metadata_(self, names): ...
    @overload
    def capture_buffers(self, names=['main'], wait: None = ..., signal_function: None = ...) -> tuple[list[NDArray[np.uint8]], dict[str, Any]]: ...
    @overload
    def capture_buffers(self, names=['main'], wait: None = ..., signal_function: Callable[[Job], None] = ...) -> Job[tuple[list[NDArray[np.uint8]], dict[str, Any]]]: ...
    @overload
    def capture_buffers(self, names=['main'], wait: Literal[True] = ..., signal_function: Callable[[Job], None] | None = ...) -> tuple[list[NDArray[np.uint8]], dict[str, Any]]: ...
    @overload
    def capture_buffers(self, names=['main'], wait: Literal[False] = ..., signal_function: Callable[[Job], None] | None = ...) -> Job[tuple[list[NDArray[np.uint8]], dict[str, Any]]]: ...
    @overload
    def switch_mode_and_capture_buffer(self, camera_config, name: str = 'main', wait: None = ..., signal_function: None = ..., delay: int = 0) -> NDArray[np.uint8]: ...
    @overload
    def switch_mode_and_capture_buffer(self, camera_config, name: str = 'main', wait: None = ..., signal_function: Callable[[Job], None] = ..., delay: int = 0) -> Job[NDArray[np.uint8]]: ...
    @overload
    def switch_mode_and_capture_buffer(self, camera_config, name: str = 'main', wait: Literal[True] = ..., signal_function: Callable[[Job], None] | None = ..., delay: int = 0) -> NDArray[np.uint8]: ...
    @overload
    def switch_mode_and_capture_buffer(self, camera_config, name: str = 'main', wait: Literal[False] = ..., signal_function: Callable[[Job], None] | None = ..., delay: int = 0) -> Job[NDArray[np.uint8]]: ...
    @overload
    def switch_mode_and_capture_buffers(self, camera_config, names=['main'], wait: None = ..., signal_function: None = ..., delay: int = 0) -> tuple[list[NDArray[np.uint8]], dict[str, Any]]: ...
    @overload
    def switch_mode_and_capture_buffers(self, camera_config, names=['main'], wait: None = ..., signal_function: Callable[[Job], None] = ..., delay: int = 0) -> Job[tuple[list[NDArray[np.uint8]], dict[str, Any]]]: ...
    @overload
    def switch_mode_and_capture_buffers(self, camera_config, names=['main'], wait: Literal[True] = ..., signal_function: Callable[[Job], None] | None = ..., delay: int = 0) -> tuple[list[NDArray[np.uint8]], dict[str, Any]]: ...
    @overload
    def switch_mode_and_capture_buffers(self, camera_config, names=['main'], wait: Literal[False] = ..., signal_function: Callable[[Job], None] | None = ..., delay: int = 0) -> Job[tuple[list[NDArray[np.uint8]], dict[str, Any]]]: ...
    def capture_array_(self, name): ...
    @overload
    def capture_array(self, name: str = 'main', wait: None = ..., signal_function: None = ...) -> NDArray[np.uint8]: ...
    @overload
    def capture_array(self, name: str = 'main', wait: None = ..., signal_function: Callable[[Job], None] = ...) -> Job[NDArray[np.uint8]]: ...
    @overload
    def capture_array(self, name: str = 'main', wait: Literal[True] = ..., signal_function: Callable[[Job], None] | None = ...) -> NDArray[np.uint8]: ...
    @overload
    def capture_array(self, name: str = 'main', wait: Literal[False] = ..., signal_function: Callable[[Job], None] | None = ...) -> Job[NDArray[np.uint8]]: ...
    def capture_arrays_and_metadata_(self, names): ...
    @overload
    def capture_arrays(self, names=['main'], wait: None = ..., signal_function: None = ...) -> tuple[list[NDArray[np.uint8]], dict[str, Any]]: ...
    @overload
    def capture_arrays(self, names=['main'], wait: None = ..., signal_function: Callable[[Job], None] = ...) -> Job[tuple[list[NDArray[np.uint8]], dict[str, Any]]]: ...
    @overload
    def capture_arrays(self, names=['main'], wait: Literal[True] = ..., signal_function: Callable[[Job], None] | None = ...) -> tuple[list[NDArray[np.uint8]], dict[str, Any]]: ...
    @overload
    def capture_arrays(self, names=['main'], wait: Literal[False] = ..., signal_function: Callable[[Job], None] | None = ...) -> Job[tuple[list[NDArray[np.uint8]], dict[str, Any]]]: ...
    @overload
    def switch_mode_and_capture_array(self, camera_config, name: str = 'main', wait: None = ..., signal_function: None = ..., delay: int = 0) -> NDArray[np.uint8]: ...
    @overload
    def switch_mode_and_capture_array(self, camera_config, name: str = 'main', wait: None = ..., signal_function: Callable[[Job], None] = ..., delay: int = 0) -> Job[NDArray[np.uint8]]: ...
    @overload
    def switch_mode_and_capture_array(self, camera_config, name: str = 'main', wait: Literal[True] = ..., signal_function: Callable[[Job], None] | None = ..., delay: int = 0) -> NDArray[np.uint8]: ...
    @overload
    def switch_mode_and_capture_array(self, camera_config, name: str = 'main', wait: Literal[False] = ..., signal_function: Callable[[Job], None] | None = ..., delay: int = 0) -> Job[NDArray[np.uint8]]: ...
    @overload
    def switch_mode_and_capture_arrays(self, camera_config, names=['main'], wait: None = ..., signal_function: None = ..., delay: int = 0) -> tuple[list[NDArray[np.uint8]], dict[str, Any]]: ...
    @overload
    def switch_mode_and_capture_arrays(self, camera_config, names=['main'], wait: None = ..., signal_function: Callable[[Job], None] = ..., delay: int = 0) -> Job[tuple[list[NDArray[np.uint8]], dict[str, Any]]]: ...
    @overload
    def switch_mode_and_capture_arrays(self, camera_config, names=['main'], wait: Literal[True] = ..., signal_function: Callable[[Job], None] | None = ..., delay: int = 0) -> tuple[list[NDArray[np.uint8]], dict[str, Any]]: ...
    @overload
    def switch_mode_and_capture_arrays(self, camera_config, names=['main'], wait: Literal[False] = ..., signal_function: Callable[[Job], None] | None = ..., delay: int = 0) -> Job[tuple[list[NDArray[np.uint8]], dict[str, Any]]]: ...
    def capture_image_(self, name): ...
    @overload
    def capture_image(self, name: str = 'main', wait: None = ..., signal_function: None = ...) -> Image.Image: ...
    @overload
    def capture_image(self, name: str = 'main', wait: None = ..., signal_function: Callable[[Job], None] = ...) -> Job[Image.Image]: ...
    @overload
    def capture_image(self, name: str = 'main', wait: Literal[True] = ..., signal_function: Callable[[Job], None] | None = ...) -> Image.Image: ...
    @overload
    def capture_image(self, name: str = 'main', wait: Literal[False] = ..., signal_function: Callable[[Job], None] | None = ...) -> Job[Image.Image]: ...
    @overload
    def switch_mode_and_capture_image(self, camera_config, name: str = 'main', wait: None = ..., signal_function: None = ..., delay: int = 0) -> Image.Image: ...
    @overload
    def switch_mode_and_capture_image(self, camera_config, name: str = 'main', wait: None = ..., signal_function: Callable[[Job], None] = ..., delay: int = 0) -> Job[Image.Image]: ...
    @overload
    def switch_mode_and_capture_image(self, camera_config, name: str = 'main', wait: Literal[True] = ..., signal_function: Callable[[Job], None] | None = ..., delay: int = 0) -> Image.Image: ...
    @overload
    def switch_mode_and_capture_image(self, camera_config, name: str = 'main', wait: Literal[False] = ..., signal_function: Callable[[Job], None] | None = ..., delay: int = 0) -> Job[Image.Image]: ...
    def start_encoder(self, encoder=None, output=None, pts=None, quality=None, name=None) -> None: ...
    def stop_encoder(self, encoders=None) -> None: ...
    @property
    def encoders(self) -> set[Encoder]: ...
    @encoders.setter
    def encoders(self, value) -> None: ...
    def start_recording(self, encoder, output, pts=None, config=None, quality=None, name=None) -> None: ...
    def stop_recording(self) -> None: ...
    def set_overlay(self, overlay) -> None: ...
    def start_and_capture_files(self, name: str = 'image{:03d}.jpg', initial_delay: int = 1, preview_mode: str = 'preview', capture_mode: str = 'still', num_files: int = 1, delay: int = 1, show_preview: bool = True, exif_data=None) -> None: ...
    def start_and_capture_file(self, name: str = 'image.jpg', delay: int = 1, preview_mode: str = 'preview', capture_mode: str = 'still', show_preview: bool = True, exif_data=None) -> None: ...
    def start_and_record_video(self, output, encoder=None, config=None, quality=..., show_preview: bool = False, duration: int = 0, audio: bool = False) -> None: ...
    @overload
    def autofocus_cycle(self, wait: None = ..., signal_function: None = ...) -> bool: ...
    @overload
    def autofocus_cycle(self, wait: None = ..., signal_function: Callable[[Job], None] = ...) -> Job[bool]: ...
    @overload
    def autofocus_cycle(self, wait: Literal[True] = ..., signal_function: Callable[[Job], None] | None = ...) -> bool: ...
    @overload
    def autofocus_cycle(self, wait: Literal[False] = ..., signal_function: Callable[[Job], None] | None = ...) -> Job[bool]: ...
