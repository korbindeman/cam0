from ..outputs import Output as Output
from _typeshed import Incomplete
from enum import Enum

class Quality(Enum):
    VERY_LOW = 0
    LOW = 1
    MEDIUM = 2
    HIGH = 3
    VERY_HIGH = 4

class Encoder:
    firsttimestamp: Incomplete
    frame_skip_count: int
    audio: bool
    audio_input: Incomplete
    audio_output: Incomplete
    audio_sync: int
    frames_encoded: int
    sync_enable: bool
    sync: Incomplete
    def __init__(self) -> None: ...
    @property
    def running(self): ...
    @property
    def width(self): ...
    @width.setter
    def width(self, value) -> None: ...
    @property
    def height(self): ...
    @height.setter
    def height(self, value) -> None: ...
    @property
    def size(self): ...
    @size.setter
    def size(self, value) -> None: ...
    @property
    def stride(self): ...
    @stride.setter
    def stride(self, value) -> None: ...
    @property
    def format(self): ...
    @format.setter
    def format(self, value) -> None: ...
    @property
    def output(self): ...
    @output.setter
    def output(self, value) -> None: ...
    @property
    def name(self): ...
    @name.setter
    def name(self, value) -> None: ...
    def encode(self, stream, request) -> None: ...
    def start(self, quality=None) -> None: ...
    def stop(self) -> None: ...
    def outputframe(self, frame, keyframe: bool = True, timestamp=None, packet=None, audio: bool = False) -> None: ...
